#include <ros/ros.h>
#include <iostream>
#include <std_msgs/String.h>
//navigation中需要使用的位姿信息头文件
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>
#include <nav_msgs/Odometry.h>
#include <geometry_msgs/PoseWithCovariance.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Quaternion.h>
//move_base头文件
#include <move_base_msgs/MoveBaseGoal.h>
#include <move_base_msgs/MoveBaseAction.h>
//actionlib头文件
#include <actionlib/client/simple_action_client.h>

#include <cmath>

using namespace std;
typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;
const double pi = 3.14159265;
class TurnLeft
{
public:
  ros::NodeHandle nh;
  ros::Publisher turn_pub;
  ros::Publisher cmd_vel_pub;
  ros::Subscriber amcl_sub;
  MoveBaseClient mc_;
  move_base_msgs::MoveBaseGoal naviGoal;
  bool init_pose_mark;
  geometry_msgs::Pose init_pose;

  TurnLeft(const std::string name):
           nh("~"),mc_(name,true)
  {
    turn_pub = nh.advertise<std_msgs::String>("/turnleft",1);
    init_pose_mark = 1;
    amcl_sub = nh.subscribe("/amcl_pose", 100, &TurnLeft::amcl_cb, this);

    naviGoal.target_pose.header.frame_id = "/map";
  }
  ~TurnLeft(){}
  
  void amcl_cb(const geometry_msgs::PoseWithCovarianceStamped::ConstPtr& msg)
  {
    if(init_pose_mark)
    {
        init_pose = (msg->pose).pose;
        init_pose_mark = 0;
    }
  }

  void turn_robot(double theta)
  {
    geometry_msgs::Pose rotatepose;
    rotatepose.position = init_pose.position;
    rotatepose.orientation = init_pose.orientation;
    rotatepose.orientation.z += sin(theta*pi/360.0);
    rotatepose.orientation.w += cos(theta*pi/360.0);
    cout<<"theta: "<<theta <<"sin: "<< rotatepose.orientation.z<<"cos: "<< rotatepose.orientation.w;
    naviGoal.target_pose.pose = rotatepose;
    naviGoal.target_pose.header.stamp = ros::Time::now();

    while(!mc_.waitForServer(ros::Duration(5.0)))
      {
        ROS_INFO("Waiting for the server...");
      }
    mc_.sendGoal(naviGoal);
    ROS_INFO("Send Goal");
    mc_.waitForResult(ros::Duration(10.0));
    ROS_INFO("Waiting...");
    //导航反馈直至到达目标点
    if(mc_.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
      {
        ROS_INFO("Succeed");;
        std_msgs::String str;
        str.data = "turn";
        turn_pub.publish(str);
      }
  }

  void detectaround()
  {
    TurnLeft::turn_robot(90.0);
  }
};

int main (int argc, char** argv)
{
  ros::init (argc, argv, "DetectAroundClient");
  ros::AsyncSpinner spinner(2);
  spinner.start();
  TurnLeft tl("move_base");
  tl.detectaround();
  ros::spin ();
  spinner.stop();
  //exit(0);
  return 0;
}
