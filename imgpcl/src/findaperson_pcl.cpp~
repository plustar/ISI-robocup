#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <imgpcl/pos.h>
#include <std_msgs/Int32.h> 
#include <std_msgs/String.h>
#include <geometry_msgs/Twist.h>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/ml/ml.hpp>
#include <opencv/cv.h>
//write txt
#include <fstream>  
#include <vector>
#include <float.h>//isnan 
//pcl
#include <sensor_msgs/PointCloud2.h>  
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl_ros/point_cloud.h>
#include <boost/foreach.hpp>
#include <pcl/visualization/cloud_viewer.h>
#include <pcl/io/io.h>
#include <pcl/io/pcd_io.h>
// time synchronize
#include <message_filters/subscriber.h>
#include <message_filters/time_synchronizer.h>
#include <sensor_msgs/Image.h>
#include <sensor_msgs/CameraInfo.h>
#include <message_filters/sync_policies/approximate_time.h>
#include <ros/callback_queue.h>
#include <boost/bind.hpp>
#include <time.h>
#include "imgpcl/objdetect_test.hpp"

using namespace std;
using namespace message_filters;
using namespace sensor_msgs;

typedef pcl::PointCloud<pcl::PointXYZRGBA> PointCloud;
typedef boost::shared_ptr<PointCloud> PointCloudPtr;
typedef boost::shared_ptr<const PointCloud> PointCloudConstPtr;
//实现时间同步性
typedef message_filters::sync_policies::ApproximateTime<sensor_msgs::Image, sensor_msgs::PointCloud2> MySyncPolicy;
typedef message_filters::sync_policies::ApproximateTime<sensor_msgs::Image, sensor_msgs::Image> MySyncPolicy2;
#define PI 3.14159
//#define TIME_MODE 1
struct PathPoint
{
    int state;
    float vel;
    float time;
};
vector<PathPoint> vppt;             //储存反馈调节时的调节参数

ros::Publisher pos_pub;             //发布pos位置信息
ros::Publisher voice_pub;           //向voice发消息
ros::Publisher move_pub;            //向navigation发消息，微调机器人
ros::Publisher nav_pub;             //向nav发消息，表明状态转移
static ros::Publisher img_numPub;   //检测到物体的数量
std_msgs::String image_numP;
const int temp_num = 3;             //需要改的地方------模板的个数
IplImage* tempImage[temp_num];      //模板图像
char object_name[temp_num][100];    //模板名称

const char *window_name = "detect";                   //显示设置  
CvFont font;
CvScalar textColor;
char text[200];

int state =-1;// -1;                     //状态标记，-1  --  什么都不做
                                    //0 - 开始检测，检测不到
                                    //1 - 检测，调整位置中
                                    //2 - 检测到，并且已调节好
int object_label = -1;       
float similarity = 0.6;     
//int det_obj_num = 0;                      
//时间同步化好的回调函数，获取rgb图像和点云数据
void callback(const ImageConstPtr& image, const PointCloud2::ConstPtr& Callback_Points);
//坐标系转换，摄像机坐标系-->机械臂坐标系
void Two2Zero(imgpcl::pos pos2, imgpcl::pos& pos0, float theta, float dx, float dy, float dz);   //需要改的地方-----坐标系转换参数
//根据检测到的物体坐标，对机器人进行调节
bool adjustRobot(imgpcl::pos p, float x);           //可能需要改的地方------ 反馈调节的系数
//arm回调函数
void armCallback(const std_msgs::String::ConstPtr& msg);
//navogation回调函数
void navCallback(const std_msgs::String::ConstPtr& msg);
//voice回调函数
void spCallback(const std_msgs::String::ConstPtr& msg);         //需要改的地方  ------ 接收到的目标物体名称
//物体识别程序，detection_method(1-单尺度，2-多尺度)， temp 多模板图像指针， temp_num-模板个数，res-返回的结果
//一般选2
bool objectRec(IplImage *image, int detection_method, IplImage** temp, int temp_num, objectRecT& res);

int main(int argc, char **argv) 
{   	   
	//cout<<"main()\n";
	//-------------------------初始化全局变量------------------------------//
	cvInitFont(&font,CV_FONT_HERSHEY_PLAIN, 1, 1, 2, 1, CV_AA);  //initialize font   
	textColor = CV_RGB(255,255,0);	
	//window_name = "detect";
	cvNamedWindow(window_name, 1);
	
	ifstream fin("/home/isi/2017_ws/src/imgpcl/template/list.txt");   //注意注意-------如果复制到其他地方，修改目录
	for(int i=0;i<temp_num;i++) //获取三个模板的直方图；
    {
        char name[100];
        fin>>name; 
        char tempName[255];
        sprintf(tempName, "/home/isi/2017_ws/src/imgpcl/template/%s", name);  
        tempImage[i] = cvLoadImage(tempName);
        ROS_INFO("Load template: %s\n", tempName);
        name[strlen(name)-4] = '\0';
        strcpy(object_name[i], name);
    }
	
	//------------------------------初始化ros---------------------------------//
	ros::init(argc, argv, "objectdetect");
	ros::NodeHandle nh_;
	pos_pub = nh_.advertise<imgpcl::pos>("/image_pos", 1);  //publish postion， arm
    voice_pub = nh_.advertise<std_msgs::String>("/recognizer/output", 1);   //说
    move_pub = nh_.advertise<geometry_msgs::Twist>("cmd_vel_mux/input/navi",1);  //移动
    nav_pub = nh_.advertise<std_msgs::String>("/img2nav", 1);  //nav接受
    img_numPub = nh_.advertise<std_msgs::String>("det_obj_num", 1);//检测到的物体数量
    
    ros::Subscriber arm_sub = nh_.subscribe("/arm_grasped", 1, armCallback);        //订阅arm的消息
    ros::Subscriber nav_sub = nh_.subscribe("/nav2image", 1, navCallback);        //订阅navigation的消息
    ros::Subscriber sp_sub = nh_.subscribe("/gpsr_object", 1, spCallback);  //订阅voice的消息
    
    //三个话题的同步性，image_raw, depth/image, depth/points
    int global_subscriber_queue_size = 1;
    
    message_filters::Subscriber<sensor_msgs::Image> visual_sub_ (nh_, "/camera1/rgb/image_raw", global_subscriber_queue_size);
    //message_filters::Subscriber<sensor_msgs::Image> depth_sub_(nh_, "/camera2/depth/image", global_subscriber_queue_size);
    message_filters::Subscriber<sensor_msgs::PointCloud2> cloud_sub_(nh_, "/camera1/depth/points", global_subscriber_queue_size);   
    message_filters::Synchronizer<MySyncPolicy> sync_(MySyncPolicy(1),  visual_sub_, cloud_sub_);
    sync_.registerCallback(boost::bind(&callback, _1, _2));
    
	ros::spin();
	
	return 0;
}

void callback(const ImageConstPtr& image, const PointCloud2::ConstPtr& Callback_Points)
{

    //cout<<"callback()\n";
    if(state == -1 || state == 2)
        return;
    //---------------获取彩色图像------------------//
    cv_bridge::CvImagePtr cv_ptr;
	try
	{
	   	cv_ptr = cv_bridge::toCvCopy(image, sensor_msgs::image_encodings::BGR8);
	}
	catch (cv_bridge::Exception& e)
	{
	     	ROS_ERROR("cv_bridge exception: %s", e.what());
	      	return;
	}   
    Mat img_color = cv_ptr->image; 
	//IplImage ipl_imgColor = cv_ptr->image;
	//IplImage *imgColor= cvCloneImage(&ipl_imgColor);
	//cvNamedWindow("color");
	//cvShowImage("color", imgColor);
	
	//---------------获得点云数据------------------//
    pcl::PointCloud<pcl::PointXYZ> points_xyz;
    pcl::fromROSMsg (*Callback_Points, points_xyz);
   
    objectRecT obj;
    imgpcl::pos p;
    bool is_find = false;
#ifdef TIME_MODE   
    time_t t1 = time(NULL);
    tm* tt1 = localtime(&t1);
    cout<<"时间1 :  "<<tt1->tm_min<<":"<<tt1->tm_sec<<"\n";
#endif
    
    image_process(img_color)
    
#ifdef TIME_MODE  
    time_t t2 = time(NULL);
    tm* tt2 = localtime(&t2);
    cout<<"时间2 :  "<<tt2->tm_min<<":"<<tt2->tm_sec<<"\n";
    cout<<"所需的时间 = "<<tt2->tm_min-tt1->tm_min<<":"<<tt2->tm_sec-tt1->tm_sec<<"\n";
#endif    
	//cout<<"------**-------------\n";
    if(is_find)
    {
        //显示   
        /*cvRectangle(imgColor, cvPoint(obj.rc.x, obj.rc.y), cvPoint(obj.rc.x+obj.rc.width-1, obj.rc.y+obj.rc.height-1), CV_RGB(0, 255, 0), 1, 8, 0);
   	    ROS_INFO("recognized results:  object = %s, similarity = %f\n", obj.name, obj.similarity);
   	    strcpy(text, obj.name);
   	    cvPutText(imgColor, text, cvPoint(obj.rc.x, obj.rc.y), &font, textColor);	*/
   	   
   	    //二维坐标转换为三维坐标，p为物体关于摄像头的坐标
   	   if(!ComputeClusterCenter(points_xyz, obj.rc, p))
   	   {
		   ROS_INFO("NO PCL!!\n");
   	       state = 0;
	   }
   	   else
   	   {
		imgpcl::pos newp;
		//ROS_INFO("P: %f %f %f\n", p.x, p.y, p.z);
		Two2Zero(p, newp, atan2(0, 337.76), -0.09,  -0.215, 0.225);  //atan(高度，长度)newp为物体相对于机械臂坐标系的坐标，最后三个参数是机械臂基坐标系x，y，z相对摄像机坐标系的转换 跟据结构变化而改变
		ROS_INFO("theta: %f \n", atan2(0, 337.76));
		ROS_INFO("p: %f %f %f\n", p.x, p.y, p.z);
		ROS_INFO("newp: %f %f %f\n", newp.x, newp.y, newp.z);
		
		fstream ofsp("/home/isi/2017_ws/src/imgpcl/config/pos.txt",ofstream::out);    
        ofsp<<p.x;
        ofsp<<p.y;
        ofsp<<p.z;  
        ofsp<<'\n';  
    	ofsp.close(); 
    	
		fstream ofsnewp("/home/isi/2017_ws/src/imgpcl/config/newpos.txt",ofstream::out);  
        ofsnewp<<newp.x;
        ofsnewp<<newp.y;
        ofsnewp<<newp.z;  
        ofsnewp<<'\n';  
    	ofsnewp.close();  
    	
		
	#ifdef TIME_MODE          
		time_t t3 = time(NULL);
		tm* tt3 = localtime(&t3);
		cout<<"时间3 :  "<<tt3->tm_min<<":"<<tt3->tm_sec<<"\n";
	#endif        
		float x = obj.rc.x + obj.rc.width/2;
		//cout<<" obj.rc.x:"<<obj.rc.x<<"\n";
		//cout<<" obj.rc.y:"<<obj.rc.y<<"\n";
		//cout<<"  obj.rc.width:"<< obj.rc.width<<"\n";
		if(newp.z>0.07) newp.z=0.07;//如果高度太高，说明高出桌面太多，加限制,根据桌面高度修改
		bool ok = adjustRobot(newp, x);

		//if(newp.y<0.28) newp.y=0.28;
		if(ok)
		{ 
			//cout<<" send position tp arm\n";
			img_numPub.publish(image_numP);//发送此时检测到的物体数量        
			pos_pub.publish(newp);   //发送到/pos话题                         
			state = 2;
		}
	#ifdef TIME_MODE         
		time_t t4 = time(NULL);
		tm* tt4 = localtime(&t4);
		cout<<"时间4 :  "<<tt4->tm_min<<":"<<tt4->tm_sec<<"\n";
	#endif
        }
   	}
   	  
   	else
   	{
   	    ROS_INFO("recognized results:  nothing\n");
   	    state = 0;
   	} 
   	cvShowImage(window_name, imgColor);
	cvWaitKey(100);	    

    if(state == 0)  //检测不到的情况
    {
        cout<<" can not find the object\n";
    }
    if(state == 1)  //检测到需要调整
    {
        cout<<"robot is adjusting\n";
    }
    cvReleaseImage(&imgColor);
    cvDestroyWindow(window_name);
}

void Two2Zero(imgpcl::pos pos2, imgpcl::pos& pos0, float theta, float dx, float dy, float dz)
{
	//cout<<"Two2Zero()\n";
    pos0.x = pos2.y+ dx;
    pos0.y = pos2.x*(-sin(theta)) + pos2.z*cos(theta) +dy;
    pos0.z = - pos2.x*cos(theta)-pos2.z*sin(theta) + dz;
}
//Includes all the headers necessary to use the most common public pieces of the ROS system.    
#include <ros/ros.h>    
//Use image_transport for publishing and subscribing to images in ROS    
#include <image_transport/image_transport.h>    
//Use cv_bridge to convert between ROS and OpenCV Image formats    
#include <cv_bridge/cv_bridge.h>    

#include <sensor_msgs/image_encodings.h>    
//Include headers for OpenCV Image processing    
#include <opencv2/imgproc/imgproc.hpp>    
//Include headers for OpenCV GUI handling    
#include <opencv2/highgui/highgui.hpp>    
#include <string>        
#include <sstream>    
#include <stdio.h>
#include "imgpcl/auto_tchar.h"
#include <opencv2/opencv.hpp>
#include <iostream>
#include <fstream>
#include <math.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Twist.h>
#include <vector>
#include <stdlib.h>
int system(const char *string); 
using namespace cv;    
using namespace std;    

//Store all constants for image encodings in the enc namespace to be used later.      
namespace enc = sensor_msgs::image_encodings; 
struct PathPoint
{
    int state;
    float vel;
    float time;
};
vector<PathPoint> vppt;             //储存反馈调节时的调节参数
void image_process(Mat inImg); 
void spCallback(const std_msgs::String::ConstPtr& msg); 
void forward_robot(float x);
void turn_robot(float theta);
/// 全局变量

const char* window_name = "gender recognise";
String face_cascade_name = "/home/isi/2017_ws/src/imgpcl/haarcascade_frontalface_alt.xml";  
//String eyes_cascade_name = "/home/isi/2017_ws/src/imgpcl/haarcascade_eye_tree_eyeglasses.xml";  
CascadeClassifier face_cascade;

ros::Publisher move_pub;            //向navigation发消息，微调机器人
ros::Publisher iffind_person_Pub;   //检测到物体的数量
ros::Publisher image2voice_Pub;  
 
std_msgs::String img2voiceP;
//ros::Publisher iffind_person;   
std_msgs::String iffind_personP;
int state = -1;
//This function is called everytime a new image is published    
void imageCallback(const sensor_msgs::ImageConstPtr& original_image)    
{    
    //Convert from the ROS image message to a CvImage suitable for working with OpenCV for processing    
    cv_bridge::CvImagePtr cv_ptr;      
    try      
    {      
        //Always copy, returning a mutable CvImage      
        //OpenCV expects color images to use BGR channel order.      
        cv_ptr = cv_bridge::toCvCopy(original_image, enc::BGR8);      
    }      
    catch (cv_bridge::Exception& e) 
    {      
        //if there is an error during conversion, display it      
        ROS_ERROR("tutorialROSOpenCV::main.cpp::cv_bridge exception: %s", e.what());      
        return;
    }
    image_process(cv_ptr->image);    
}
bool find_person(Mat inImg)    
{   
    if( inImg.empty() )    
    {    
        ROS_INFO("Camera image empty");    
        return false;//break;    
    }
    if( !face_cascade.load( face_cascade_name ) ){ printf("--(!)Error loading\n"); };  
    //if( !eyes_cascade.load( eyes_cascade_name ) ){ printf("--(!)Error loading\n"); };
    std::vector<Rect> faces;  
    Mat inImg_gray;  
    cvtColor( inImg, inImg_gray, CV_BGR2GRAY );  
    equalizeHist( inImg_gray, inImg_gray );  
    //-- Detect faces  
    face_cascade.detectMultiScale( inImg_gray, faces, 1.1, 3, 0|CV_HAAR_SCALE_IMAGE, Size(30, 30) );  
    int human_num = faces.size();
    cout<<"human_num:"<<human_num<<endl;
    if(human_num == 0)
    {
        img2voiceP.data = "I find no people, I am finding";
        image2voice_Pub.publish(img2voiceP);//发送此时检测到的物体数量
        turn_robot(1.5);
        return false;
    }
    if(human_num > 1)
    {
        img2voiceP.data = "There is more than one people!";
        image2voice_Pub.publish(img2voiceP);//发送此时检测到的物体数量 
        //return;
        return false;
    }

    if(human_num == 1)
    {  
        Mat face = inImg_gray( faces[0] ); 
        Mat face_resized;
        rectangle(inImg,faces[0],Scalar(0,255,0),1);
        int pos_x = 0;
        int pos_y = 0;
        pos_x = faces[0].x + faces[0].width ;
        pos_y = faces[0].y + faces[0].height;
        cout<<"pos_x"<<pos_x<<endl;
        cout<<"pos_y"<<pos_y<<endl;
        if(pos_x - 320 > 80)
            turn_robot(-0.8);
        if(pos_x - 320 < -80)
            turn_robot(0.8);
        if(pos_y > 120)
            forward_robot(0.2);
        if(abs(pos_x - 320) < 100 && pos_y < 120)
	    {
            img2voiceP.data = "I have reached the person!";
            image2voice_Pub.publish(img2voiceP); 
            iffind_personP.data = "find_person";
            iffind_person_Pub.publish(iffind_personP);             
		    state = 2;
		
	    }
	    //imwrite("/home/isi/2017_ws/src/imgpcl/person.jpg",frame);//保存图片    
        imshow( window_name, inImg );
        waitKey(5);
        return true; 
    }
} 
void turn_robot(float theta)
{
    geometry_msgs::Twist vel;
    int count = 0;
    float time = 2;
    ros::Rate loop_rate(10);
    int num = time*10;
    PathPoint pt;
    //转90度
    //float theta = 5;
	//cout<<"theta:"<<theta<<endl;
	float theta2 = theta/time;
	vel.angular.z = theta2;    
    count = 0;
    num = time*10;
    while(count < num)
    {
        count++;
        move_pub.publish(vel);
        loop_rate.sleep();
    }
    pt.state = 0;
    pt.time = time;
    pt.vel = vel.angular.z;
    vppt.push_back(pt);
    vel.angular.z = 0.0;
    move_pub.publish(vel);
    cout<<"转弯\n";
    sleep(1);
}
void forward_robot(float x)
{
    geometry_msgs::Twist vel;
    int count = 0;
    float time = 4;
    vel.linear.x = x/time; 
    ros::Rate loop_rate(10);
    int num = time*10;
    //cout<<"armCallback1()\n";
    while(count < num)
    {
        count++;
        move_pub.publish(vel);
        loop_rate.sleep();
    }
    PathPoint pt;
    pt.state = 0;
    pt.time = time;
    pt.vel = vel.linear.x;
    vppt.push_back(pt);
    vel.linear.x = 0.0;
    move_pub.publish(vel);
    cout<<"直行\n";
    sleep(1);
}
void navCallback(const std_msgs::String::ConstPtr& msg)
{
	//cout<<"navCallback()\n";
    ROS_INFO("navCallback received: %s\n", msg->data.c_str());
    if(msg->data == "find_person")   //接受到navigation的消息，开始检测
    {
        state = 0;
    }
}   
/** 
* This is ROS node to track the destination image 
*/    
int main(int argc, char **argv)    
{    
    ros::init(argc, argv, "image_process");    
    ROS_INFO("-----------------");
    ros::NodeHandle nh;
    move_pub = nh.advertise<geometry_msgs::Twist>("cmd_vel_mux/input/navi",1);  //移动
    iffind_person_Pub = nh.advertise<std_msgs::String>("find_person", 1);
    image2voice_Pub = nh.advertise<std_msgs::String>("img2voice", 1);
    image_transport::ImageTransport it(nh); 
    image_transport::Subscriber sub = it.subscribe("camera1/rgb/image_raw", 1, imageCallback);    
   // ros::Subscriber camInfo         = nh.subscribe("camera/rgb/camera_info", 1, camInfoCallback);    
    ros::Subscriber nav_sub = nh.subscribe("/nav2image", 1, navCallback);        //订阅navigation的消息
    ros::spin();
    //ROS_INFO is the replacement for printf/cout.    
    ROS_INFO("main_No error.");  
}
